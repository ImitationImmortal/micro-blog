// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Auth service

func NewAuthEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Auth service

type AuthService interface {
	SignIn(ctx context.Context, in *AuthSignInRequest, opts ...client.CallOption) (*AuthSignInResponse, error)
	SignUp(ctx context.Context, in *AuthSignUpRequest, opts ...client.CallOption) (*AuthSignUpResponse, error)
	Info(ctx context.Context, in *AuthInfoRequest, opts ...client.CallOption) (*AuthInfoResponse, error)
	ChangePwd(ctx context.Context, in *AuthChangePwdRequest, opts ...client.CallOption) (*AuthChangePwdResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) SignIn(ctx context.Context, in *AuthSignInRequest, opts ...client.CallOption) (*AuthSignInResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.SignIn", in)
	out := new(AuthSignInResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) SignUp(ctx context.Context, in *AuthSignUpRequest, opts ...client.CallOption) (*AuthSignUpResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.SignUp", in)
	out := new(AuthSignUpResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) Info(ctx context.Context, in *AuthInfoRequest, opts ...client.CallOption) (*AuthInfoResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.Info", in)
	out := new(AuthInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ChangePwd(ctx context.Context, in *AuthChangePwdRequest, opts ...client.CallOption) (*AuthChangePwdResponse, error) {
	req := c.c.NewRequest(c.name, "Auth.ChangePwd", in)
	out := new(AuthChangePwdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Auth service

type AuthHandler interface {
	SignIn(context.Context, *AuthSignInRequest, *AuthSignInResponse) error
	SignUp(context.Context, *AuthSignUpRequest, *AuthSignUpResponse) error
	Info(context.Context, *AuthInfoRequest, *AuthInfoResponse) error
	ChangePwd(context.Context, *AuthChangePwdRequest, *AuthChangePwdResponse) error
}

func RegisterAuthHandler(s server.Server, hdlr AuthHandler, opts ...server.HandlerOption) error {
	type auth interface {
		SignIn(ctx context.Context, in *AuthSignInRequest, out *AuthSignInResponse) error
		SignUp(ctx context.Context, in *AuthSignUpRequest, out *AuthSignUpResponse) error
		Info(ctx context.Context, in *AuthInfoRequest, out *AuthInfoResponse) error
		ChangePwd(ctx context.Context, in *AuthChangePwdRequest, out *AuthChangePwdResponse) error
	}
	type Auth struct {
		auth
	}
	h := &authHandler{hdlr}
	return s.Handle(s.NewHandler(&Auth{h}, opts...))
}

type authHandler struct {
	AuthHandler
}

func (h *authHandler) SignIn(ctx context.Context, in *AuthSignInRequest, out *AuthSignInResponse) error {
	return h.AuthHandler.SignIn(ctx, in, out)
}

func (h *authHandler) SignUp(ctx context.Context, in *AuthSignUpRequest, out *AuthSignUpResponse) error {
	return h.AuthHandler.SignUp(ctx, in, out)
}

func (h *authHandler) Info(ctx context.Context, in *AuthInfoRequest, out *AuthInfoResponse) error {
	return h.AuthHandler.Info(ctx, in, out)
}

func (h *authHandler) ChangePwd(ctx context.Context, in *AuthChangePwdRequest, out *AuthChangePwdResponse) error {
	return h.AuthHandler.ChangePwd(ctx, in, out)
}
